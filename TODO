In Progress:
------------

====================================================================

ChrisJastram:
-------------

Map rotation, ego-centric style (we are always pointing up)

====================================================================

Fritz:
------

Start Doxygen Documentation

change config File handling

import gpsdrive into anjuta and with this remodel 
the User Interface with glade-2

remove gpsd sources

====================================================================

Joerg:
------

Trying to import gpsdrive into eclipse. Any help appreciated.

Staighten the naming of variables and functions
   -first step done, but stil a long way to go
	still open:
		longi --> lon
		xy_draw --> draw_xy
		cb_t_xy		for Callback Timer xy 
		cb_c_xy		for Callback of Checkbox xy 
		bt_xy		for Button xy 
		load_xy		for loading Data for xy
		save_xy		for saving Data for xy

Database (SQL):
make gpsdrive read directly from mysql without first writing a file.
   -first step done

Vertor map Data:
	Add code for showing Vectormap Data. 
	Decide about internal representation and structure vektor map data.

new POI(Point Of Interest) Database support:
	- started. 
		- It already shows points in database (lat/lon/name/Icon)
		- Import of 2.500.000 Points seems to work


in das einstellungsmenue verlagern:
	Speichere Spur 
ins pulldown diverse verlegen:
	Starte gpsd 
	Karte herunterladen


=============================================================================
Koji <koji@e-mail.jp>

- making 2.10pre2's ja.po. 

- Tokyo maps:
  This URL contain the position (deg/mm/ss), map scale(1/7000) and 
  map size(1280x1024). And a lot of scales can be obtained.
  This is very convenient for me. :-) Only one probrem is not WGS84 position,
  this positioning is named "Tokyo". So I need excange the position. :-(

  http://www.mapion.co.jp/c/f?el=139/36/45.600&scl=70000&size=1280,1024&uc=1&grp=MapionBB&nl=35/31/36.300


#############################################################################

Vector Support description and thoughts:

First of all the new poi and street tables are pre pre pre pre alpha and 
highly testing ;-))
And since it is highly experimental and testing the structure of the database 
might still be subject of drastic changes.

At the moment it has the following parts:
 - poi.pl to create and fill the database
 - the two main tables: poi and streets
 - and the displaying routines in src/poi.c and src/streets.c
 - the bugs and quirks especially for the testers ;-)

At the moment the only relation to the old database tables is: The Tables are 
located in the same database and therefor using the same connect routines. At 
the Moment this is on purpose, because the structure changed pretty much and 
I thought it is a wise Idea to leave the working code as is.
There were too many connections to other programs of which I had no exact 
knowledge; so i decided to do a soft migration. First get everything running 
with the new Database tables. And later remove the waypoint table.
At the moment there is no user interface in gpsdrive to change or set any of 
these sql Data. The only way to fill in Data is at the moment using poi.pl in 
the scripts directory. Sure this is to change for later versions; but it will 
be a lot of programming.

There is an effort to create a central database where everyone can contribute 
poi and street entries. And on the other hand download all this data from 
this central database to your user pc. I got this Idea when I was looking at 
websites like http://www.wigle.net/. They are doing similar things for 
wavelan waypoints.

Table 'poi':
------------
The main Table is poi. There is are relations 
   poi(type_id) --> type(type_id)
   poi(source_id) --> source(source_id)
   poi(address_id) --> address(address_id) [not filled yet]

poi is holding single Point-Of-Interest(POI)

Table 'source':
---------------
This Table is intended to reflect where the data came from. This should 
include things like a link(url) to the source. With this table you will be 
able to update part of your complete data whenever there is an update in the 
data this source provides. Another importand reason for this table is to 
track the licence of the Data inserted. This way we can be sure we only have 
data in our repository which has the appropriate free licence. On the other 
hand this enables us to easily remove data which we later find to have a 
licence we cannot live with.


Table 'address':
----------------
My idea for address was to fill in things like the address of a
Hotel/Shop/Museum with some additional information.

Another possibility is to use address to mark street segments with the
appropriate name of the street.

At the moment this table will not be filled. This is for later use.

Special columns:
----------------
last_modified: The last_modified column is intended to figure out if this 
entry was modified since last download. This should enable incremental 
downloads. Since my local database already contains 5.532.091 entries, this 
seems to be very important.

scale_[min|max]: The scale_min scale_max columns help to decide in which 
resolution the poi/streets will be displayed in gpsdrive.


Filling the table 'poi':
------------------------
To fill your poi Tables you just have to start poi.pl from the scripts 
directory.
If you have one day of time you can give "poi.pl --all" a try ;-)

For City Names only, you can use 
poi.pl --earthinfo_nga_mil=xx[,yy][,zz]...
            Download from earthinfo.nga.mil and import into mysql DB. These
            are ~2.500.000 City Names around the world
            Download Country File from http://earth-info.nga.mil/gns/html/
            where xx is one or more countries. poi.pl -earthinfo_nga_mil=??
            gives you a complete list of allowed county tuples.
            For more info on Countries have a look at
            http://earth-info.nga.mil/gns/html/cntry_files.html
            The complete download is about ~180 MB

As far as i had a look on this Data it is a pretty good start. The lat/lon for 
the cities seems to be in the area of 1 Km to the real city center. 

One problem I still have to solve is how to handle merging changes in the 
download from for example earthinfo.nga.mil (They update once a month) to my 
own corrections.

Table 'streets':
----------------
The streets database is a quick hack for testing for now. But plans are to 
enter street segments in there. So we can add vector maps to gpsdrive. At the 
moment you can fill the table with poi.pl (yes the name sounds wrong). poi.pl 
can download some data and import them into the tables.
 poi.pl --wdb   
Downloads and imports the World Database WDB Data
            These data consists of Country Borders and Waterlines
            Download is ~30 MB

At the moment streets uses the normal table 'type' and some hard coded stuff 
in the source(As stated: a Hack), but I think this has to be changed. Since 
the information needed will be a little different to type for the poi.


Table 'type':
-------------
In the type Database you will find a classification for the poi data. For now 
I insert some type Data in there for a start. These are for now only in 
german and only a suggestion. We will have to think about the needed types. 
We will need a starting list for the types which will be initially generated 
when installing gpsdrive. The Idea is to create a hierarchical structure. 
This would enable us to classify the points much easier and/or much more 
precise. An example would be a pharmacy would classify as 
medical.shop.pharmacy. But all these thoughts are still way at the beginning.
Another thing we would need for all those type is an icon to add to the point 
when showing on the map. I started to change the old inline icon handling to 
manage all icons as files and to read also from the gpsdrive sysstemwide icon 
directory and from the user directory. But only started.


> and how they interrelate with each other?  
> (And, is the POI table intended to REPLACE the "waypoints" table, or just
> supplement it?)

As you see; yes my plan is to replace the waypoint table. But it will take a 
very long time until this will happen.









####################################################################

Unassigned:
-----------

Modularising:
	Put every drawing layer into a seperate module.

	moving configuration Data into a structure

	moving actual settings into another structure
	
	move more stuff from gpsdrive.c into standalone Files
		examples:
		- waypoint.{c,h}
		- gps_handling.{c.h}
		- icons.{c.h}

Documentation:
	Write comments to all the existing code
	Write man Pages
	Translate man Pages
	Translate in Programm Text

Icons:
	Draw Icons for different Waypoint Types
	think about waypoint type names

Makefiles:
	include generation of icon Directory while installing gpsdrive
	
Vektor Map Sources:
	Find new Sources for Maps with Free Licence
	Write conversion routines/scripts for these different map Sources 
	to import them into the local mySQL Database 
	
Distribution:
	update the distribution dependant Files (debian, suse, ...)

Central POI Server:
	We want to set up an central POI(Point of interrest) Server. 
	Idea is: to populate this Server from all the point of interrests
		 you have. 
		Then give the Server a Web-interface(first step) to download alle 
		these POIs and import them into your local DB.
		Further steps will be to write sync-routines to
		sync this local Data with the central Server.

====================================================================

Unassigned User Requests:
-------------------------

<<<<<<< TODO
One thing which would e nice; if you drop me/us a note on the things 
you start programming. Just to synchronize work and  circumventing two 
people trying to solve the same problem.

One small comment: We are just planing a major userinterface change/rewrite. 
The plan is, that this change will enable userinterface changes with anjuta and 
glade-2. So if you want to make changes inside the userinterface code you  
might want to wait another 3-4 weeks until these changes have made it into the CVS. 

- Autosave Tracks periodically
	- started: savetrack was seperated and got 
			   option to save only aktuall Track an not track_ALL.sav
- Find Error in gpsd 2.20 Handling concerning the number of seen 
  Satelites and wrong latitude


- Finding and correcting Bugs in the existing Code.
- writing lots of usefull comments to the existing code.
- extracting functionality into meaningfull extra files.
- Help drawing icons for the waypoints.
- Help make the code more error resistant
- Help translate the gettext strings (po-Files) in to your native language
- writing code for the handling the Point Of Interest Data 
  inside the Database.
     - this would be searching an point of interrest in 
       the Database and displaying it on the map
     - having an interface to select what kind of POIs to 
       display at the moment
- Have a close look over the POI-Types and add categories/new types 
  including descriptions and icons
- Point and measure Mode: Show the lat/lon of a point you clicked on. 
  Click an another point and then show the distance between those two points.
- writing and correcting text for the FAQ/man pages
- find Data for importing into the new Datastructure POI/streets which 
  have an acceptable public licence. The second step would then be to 
  find a way to import this Data into the Database.
- write routines to import gps Tracks into the Database. The difficulty 
  here is to classify the Data and find corresponding tracks and merge 
  them together. Also to find gaps in the tracks and split them at 
  this point.
- have a look at gdal and get an idea if we could combine gdal 
  development and gpsdrive development
- make gpsdrive compile inside eclipse.
- refactor the variable names inside gpsdrive.
- write an interface to use functions like gpsbabel gpstrans from inside
  gpsdrive.

.... many mode i didn't think of at the moment. If these are not enough 
or don't please you, you also you might find more ideas if you have a 
short look at the old mails inside the mailinglist.
=======
- Autosave Tracks periodically
	- started: savetrack was seperated and got 
		   option to save only aktuall Track an not track_ALL.sav

- Move part of the user interface to a Pulldown menu.

- add an Mode for Displaying position under the cursor and measure distances

- add support for moving the map with the cursor keys if in POS-Mode

- Correct/complete/add-new translations in the po Files
>>>>>>> 1.7

====================================================================

DONE:
-----

- draw grid: Add text to draw-grid to see which lat/lon this gridline belongs to.

- Add Waypoint with one Keypress

- Add debian files to CVS for easier creating a debian package.

====================================================================

Old (has to be checked):
------------------------

Command line switch to set gpsd hostname and port for remote control.

Add additional server: expedia.com

Add  load of trackings (i.e. stored in the GPS and
converted with a nice perl script anyone will write).

Servermode to display different positions provided over Internet
server.

resizing of window
centering of map to selected points

render maps in greyscale

create ~/.gpsdrive directory and files if missing.
